<?php
/**
 * Migration file
 *
 * acm : Algae Culture Management (https://github.com/singularfactory/ACM)
 * Copyright 2012, Singular Factory <info@singularfactory.com>
 *
 * This file is part of ACM
 *
 * ACM is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ACM is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ACM.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @copyright     Copyright 2012, Singular Factory <info@singularfactory.com>
 * @package       ACM.Lib.Migration
 * @since         1.0
 * @link          https://github.com/singularfactory/ACM
 * @license       GPLv3 License (http://www.gnu.org/licenses/gpl.txt)
 */

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class Version98 extends Doctrine_Migration_Base {

	protected $strains = array();

	protected $strainIsolators = array();

	public function preUp() {
		echo ">> preUp() found ";

		$strainTable = Doctrine_Core::getTable('Strain');
		$strainTable->setColumn('isolator_id', 'integer', null, array('type' => 'integer'));
		$this->strains = $strainTable->getInstance()->createQuery('s')->select('s.id, s.isolator_id')->execute();

		echo count($this->strains);
		echo " strains\n";
	}

	public function up() {
		echo ">> up(): dropping isolator_id from strain\n";
		$this->dropForeignKey('strain', 'strain_isolator_id_isolator_id');
		$this->removeColumn('strain', 'isolator_id');

		echo ">> up(): creating strain_isolators table\n";
		$this->createTable('strain_isolators', array(
			'strain_id' => array('type' => 'integer','primary' => '1','length' => '8',),
			'isolator_id' => array('type' => 'integer','primary' => '1','length' => '8',),
			'created_at' => array('notnull' => '1','type' => 'timestamp','length' => '25',),
			'updated_at' => array('notnull' => '1','type' => 'timestamp','length' => '25',),
		), array(
			'type' => 'INNODB',
			'primary' => array(0 => 'strain_id',1 => 'isolator_id',),
			'collate' => 'utf8_general_ci',
			'charset' => 'utf8',
		));
		$this->createForeignKey('strain_isolators', 'strain_isolators_strain_id_strain_id', array(
			'name' => 'strain_isolators_strain_id_strain_id',
			'local' => 'strain_id',
			'foreign' => 'id',
			'foreignTable' => 'strain',
			'onUpdate' => '',
			'onDelete' => 'cascade',
		));
		$this->createForeignKey('strain_isolators', 'strain_isolators_isolator_id_isolator_id', array(
			'name' => 'strain_isolators_isolator_id_isolator_id',
			'local' => 'isolator_id',
			'foreign' => 'id',
			'foreignTable' => 'isolator',
		));
		$this->addIndex('strain_isolators', 'strain_isolators_strain_id', array('fields' => array(0 => 'strain_id')));
		$this->addIndex('strain_isolators', 'strain_isolators_isolator_id', array('fields' => array(0 => 'isolator_id')));
	}

	public function postUp() {
		echo ">> postUp(): initializing strain_isolators table\n";
		foreach ( $this->strains as $strain ) {
			$strainIsolator = new StrainIsolators();
			$strainIsolator->setStrainId($strain->getId());
			$strainIsolator->setIsolatorId($strain->getIsolatorId());
			if ( $strainIsolator->trySave() ) {
				echo ">> postUp(): strain {$strain->getId()} => isolator {$strain->getIsolatorId()}\n";
			}
		}
	}

	public function preDown() {
		$this->strainIsolators = Doctrine_Core::getTable('StrainIsolators')->findAll();
	}

	public function down() {
		$this->dropForeignKey('strain_isolators', 'strain_isolators_strain_id_strain_id');
		$this->dropForeignKey('strain_isolators', 'strain_isolators_isolator_id_isolator_id');
		$this->removeIndex('strain_isolators', 'strain_isolators_strain_id', array('fields' => array(0 => 'strain_id',),));
		$this->removeIndex('strain_isolators', 'strain_isolators_isolator_id', array('fields' => array(0 => 'isolator_id')));
		$this->dropTable('strain_isolators');

		$this->addColumn('strain', 'isolator_id', 'integer', '8', array('notnull' => '1'));
		$this->createForeignKey('strain', 'strain_isolator_id_isolator_id', array(
			'name' => 'strain_isolator_id_isolator_id',
			'local' => 'isolator_id',
			'foreign' => 'id',
			'foreignTable' => 'isolator',
		));
	}

	public function postDown() {
		foreach ( $this->strainIsolators as $strainIsolator ) {
			$strain = Doctrine_Core::getTable('Strain')->find($strainIsolator->getStrainId());
			$strain->setIsolatorId($strainIsolator->getIsolatorId());
			$strain->trySave();
		}
	}

}