<?php
/**
 * Migration file
 *
 * acm : Algae Culture Management (https://github.com/singularfactory/ACM)
 * Copyright 2012, Singular Factory <info@singularfactory.com>
 *
 * This file is part of ACM
 *
 * ACM is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ACM is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ACM.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @copyright     Copyright 2012, Singular Factory <info@singularfactory.com>
 * @package       ACM.Lib.Migration
 * @since         1.0
 * @link          https://github.com/singularfactory/ACM
 * @license       GPLv3 License (http://www.gnu.org/licenses/gpl.txt)
 */

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class Version137 extends Doctrine_Migration_Base {

	protected $projects = null;

	public function preUp() {
		$projectTable = Doctrine_Core::getTable('Project');
		$this->projects = $projectTable->createQuery('p')->select('DISTINCT p.name')->execute(array(), Doctrine_Core::HYDRATE_SCALAR);

		echo sprintf(">> preUp() found %d distinct project names\n", count($this->projects));
	}

	public function up() {
		echo ">> up(): creating `project_name` table\n";
		$this->createTable('project_name', array(
			'id' => array('type' => 'integer','primary' => '1','autoincrement' => '1','length' => '8',),
			'name' => array('type' => 'string','notnull' => '1','length' => '200',),
			'created_at' => array('notnull' => '1','type' => 'timestamp','length' => '25',),
			'updated_at' => array('notnull' => '1','type' => 'timestamp','length' => '25',),
			),
			array(
				'type' => 'INNODB',
				'indexes' => array('project_name_name' => array('fields' => array(0 => 'name',),),),
				'primary' => array(0 => 'id',),
				'collate' => 'utf8_general_ci',
				'charset' => 'utf8',
			)
		);

		echo ">> up(): adding `project_name_id` column in `project` table\n";
		$this->addColumn('project', 'project_name_id', 'integer', '8', array('notnull' => '1'));
	}

	public function postUp() {
		$projectTable = Doctrine_Core::getTable('Project');

		echo ">> postUp(): initializing `project_name` table\n";
		foreach ( $this->projects as $project ) {
			$projectName = new ProjectName();
			$projectName->setName($project['p_name']);
			if ( $projectName->trySave() ) {
				echo ">> postUp(): Project '{$projectName->getName()}'({$projectName->getId()}) saved\n";

				$projectTable->createQuery('p')
					->update()
					->set('p.project_name_id', $projectName->getId())
					->where("p.name LIKE ?", $projectName->getName())
					->execute();
			}
		}
	}

	public function preDown() {
		$projectNameTable = Doctrine_Core::getTable('ProjectName');
		$projectTable = Doctrine_Core::getTable('Project');

		foreach ( Doctrine_Core::getTable('Project')->findAll() as $project ) {
			$projectName = $projectNameTable->createQuery('pn')->where('pn.id = ?', $project->getProjectNameId())->fetchOne();
			$projectTable->createQuery('p')->update()
				->set('name', sprintf("'%s'", $projectName->getName()))
				->where('p.id = ?', $project->getId())
				->execute();
		}
	}

	public function down() {
		$this->removeColumn('project', 'project_name_id');
		$this->dropTable('project_name');
	}

}