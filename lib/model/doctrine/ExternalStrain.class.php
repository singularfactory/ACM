<?php
/**
 * Model class
 *
 * acm : Algae Culture Management (https://github.com/singularfactory/ACM)
 * Copyright 2012, Singular Factory <info@singularfactory.com>
 *
 * This file is part of ACM
 *
 * ACM is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ACM is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ACM.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @copyright     Copyright 2012, Singular Factory <info@singularfactory.com>
 * @package       ACM.Lib.Model
 * @since         1.0
 * @link          https://github.com/singularfactory/ACM
 * @license       GPLv3 License (http://www.gnu.org/licenses/gpl.txt)
 */


/**
 * ExternalStrain
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package ACM.Lib.Model
 * @since 1.0
 */
class ExternalStrain extends BaseExternalStrain {
	public function getFullCode() {
		$code = str_pad($this->_get('id'), 4, '0', STR_PAD_LEFT);

		$axenicCode = '';
		if ( ! $this->getIsAxenic() ) {
			$axenicCode = 'B';
		}

		return "BEA$code$axenicCode";
	}

	public function getTaxonomicName() {
		return sprintf('%s %s %s', $this->getTaxonomicClass(), $this->getGenus(), $this->getSpecies());
	}

	public function getGenusAndSpecies() {
		return sprintf('%s %s', $this->getGenus(), $this->getSpecies());
	}

	public function getNbCultureMedia() {
		return count($this->getCultureMedia());
	}

	public function getNbContainers() {
		return count($this->getContainers());
	}

	public function getNbRelatives() {
		return Doctrine_Query::create()
			->from('ExternalStrainRelative sr')
			->where('sr.external_strain_id = ?', $this->getId())
			->count();
	}

	public function getFormattedEnvironment() {
		if ( $this->getEnvironment()->exists() ) {
			return $this->getEnvironment()->getName();
		}
		return sfConfig::get('app_no_data_message');
	}

	public function getFormattedHabitat() {
		if ( $this->getHabitat()->exists() ) {
			return $this->getHabitat()->getName();
		}
		return sfConfig::get('app_no_data_message');
	}

	public function getFormattedIsEpitype() {
		if ( $this->getIsEpitype() ) {
			return 'yes';
		}
		return 'no';
	}

	public function getFormattedIsAxenic() {
		if ( $this->getIsAxenic() ) {
			return 'yes';
		}
		return 'no';
	}

	public function getFormattedHasDna() {
		if ( $this->getHasDna() ) {
			return 'yes';
		}
		return 'no';
	}

	public function getFormattedCitations() {
		if ( $citations = $this->_get('citations') ) {
			return $citations;
		}
		return sfConfig::get('app_no_data_message');
	}

	public function getFormattedTransferInterval() {
		if ( $transferInterval = $this->_get('transfer_interval') ) {
			return "$transferInterval weeks";
		}
		return sfConfig::get('app_no_data_message');
	}

	public function getFormattedObservation() {
		if ( $observation = $this->_get('observation') ) {
			return $observation;
		}
		return sfConfig::get('app_no_data_message');
	}

	public function getFormattedIsolationDate() {
		return $this->formatDate($this->_get('isolation_date'));
	}

	public function getFormattedCollectionDate() {
		return $this->formatDate($this->_get('collection_date'));
	}

	public function getFormattedContainer() {
		if ( $container = $this->getContainer()->getName() ) {
			return $container;
		}
		return sfConfig::get('app_no_data_message');
	}

	public function getNbCollectors() {
		return ExternalStrainCollectorsTable::getInstance()->createQuery('c')
			->where('c.external_strain_id = ?', $this->getId())
			->count();
	}

	public function getNbIsolators() {
		return count($this->getIsolators());
	}

	public function getFormattedIsolators() {
		$isolators = '';
		foreach ( $this->getIsolators() as $isolator ) {
			$name = $isolator->getName();
			$surname = $isolator->getSurname();
			$isolators .= "$name $surname, ";
		}

		if ( empty($isolators) ) {
			return sfConfig::get('app_no_data_message');
		}
		else {
			return preg_replace('/, $/', '', $isolators);
		}
	}

	public function getFormattedSupervisor() {
		if ( !$this->getSupervisorId() ) {
			return sfConfig::get('app_no_data_message');
		}

		return $this->getSupervisor();
	}

	public function getFormattedSupervisorWithInitials() {
		if ( !$this->getSupervisorId() ) {
			return sfConfig::get('app_no_data_message');
		}

		return $this->getSupervisor()->getFullNameWithInitials();
	}

	public function getSupervisorInitials() {
		if ( !$this->getSupervisorId() ) {
			return '';
		}

		return $this->getSupervisor()->getInitials();
	}

	public function getCollectionDate() {
		if ( $date = $this->_get('collection_date') ) {
			return $this->formatDate($date);
		}
		else {
			return sfConfig::get('app_no_data_message');
		}
	}

	public function getNbProjects() {
		return Doctrine_Query::create()
			->from('Project p')
			->where('p.external_strain_id = ?', $this->getId())
			->count();
	}

	public function getNbIsolations() {
		return Doctrine_Query::create()
			->from('Isolation i')
			->where('i.external_strain_id = ?', $this->getId())
			->count();
	}
}
