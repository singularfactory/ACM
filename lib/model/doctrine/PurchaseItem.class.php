<?php
/**
 * Model class
 *
 * acm : Algae Culture Management (https://github.com/singularfactory/ACM)
 * Copyright 2012, Singular Factory <info@singularfactory.com>
 *
 * This file is part of ACM
 *
 * ACM is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ACM is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ACM.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @copyright     Copyright 2012, Singular Factory <info@singularfactory.com>
 * @package       ACM.Lib.Model
 * @since         1.0
 * @link          https://github.com/singularfactory/ACM
 * @license       GPLv3 License (http://www.gnu.org/licenses/gpl.txt)
 */


/**
 * PurchaseItem
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package ACM.Lib.Model
 * @since 1.0
 */
class PurchaseItem extends BasePurchaseItem {

	protected $products = array(
		'strain' => array(
			'table' => 'StrainTable',
			'default_description' => 'Strain',
		),
		'genomic_dna' => array(
			'table' => 'StrainTable',
			'default_description' => 'Genomic DNA from strain',
		),
		'culture_medium' => array(
			'table' => 'CultureMediumTable',
			'default_description' => 'Culture medium',
		),
	);

	public function getFormattedStatus() {
		switch( $this->_get('status') ) {
			case sfConfig::get('app_purchase_item_pending'):
				return 'pending';
				break;
			case sfConfig::get('app_purchase_item_processing'):
				return 'processing';
				break;
			case sfConfig::get('app_purchase_item_ready');
				return 'ready';
				break;
		}
		return 'processing';
	}

	public function getDescription() {
		$product = $this->getProduct();
		$code = $this->getProductId();

		// Get product ID
		if ( $product === 'strain' ) {
			$id = preg_replace(sfConfig::get('app_strain_bea_code_regex'), '$1', $code);
		}
		else if ( $product === 'genomic_dna' ) {
			$id = preg_replace(sfConfig::get('app_strain_bea_code_regex'), '$1', $code);
		}
		else if ( $product === 'culture_medium' ) {
			$id = preg_replace(sfConfig::get('app_culture_medium_bea_code_regex'), '$1', $code);
		}

		// Get extra information about the product
		$tableInstance = call_user_func(array($this->products[$product]['table'], 'getInstance'));
		if ( $model = $tableInstance->findOneById($id) ) {
			return $this->products[$product]['default_description'].' '.$model->getCode();
		}

		return $this->products[$product]['default_description'];
	}

	public function getFormattedRemarks() {
		$remarks = $this->getRemarks();
		if ( empty($remarks) ) {
			return sfConfig::get('app_no_data_message');
		}
		else {
			return $remarks;
		}
	}

	public function getFormattedSupervisor() {
		$supervisor = $this->getSupervisor();
		if ( $supervisor->exists() ) {
			return $supervisor;
		}

		return sfConfig::get('app_no_data_message');
	}

}
