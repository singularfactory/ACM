<?php

/**
 * BaseStrainUsage
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $taxonomic_class_id
 * @property integer $genus_id
 * @property integer $species_id
 * @property integer $usage_id
 * @property TaxonomicClass $TaxonomicClass
 * @property Genus $Genus
 * @property Species $Species
 * @property UsageAreaUsages $Usages
 * 
 * @method integer         getId()                 Returns the current record's "id" value
 * @method integer         getTaxonomicClassId()   Returns the current record's "taxonomic_class_id" value
 * @method integer         getGenusId()            Returns the current record's "genus_id" value
 * @method integer         getSpeciesId()          Returns the current record's "species_id" value
 * @method integer         getUsageId()            Returns the current record's "usage_id" value
 * @method TaxonomicClass  getTaxonomicClass()     Returns the current record's "TaxonomicClass" value
 * @method Genus           getGenus()              Returns the current record's "Genus" value
 * @method Species         getSpecies()            Returns the current record's "Species" value
 * @method UsageAreaUsages getUsages()             Returns the current record's "Usages" value
 * @method StrainUsage     setId()                 Sets the current record's "id" value
 * @method StrainUsage     setTaxonomicClassId()   Sets the current record's "taxonomic_class_id" value
 * @method StrainUsage     setGenusId()            Sets the current record's "genus_id" value
 * @method StrainUsage     setSpeciesId()          Sets the current record's "species_id" value
 * @method StrainUsage     setUsageId()            Sets the current record's "usage_id" value
 * @method StrainUsage     setTaxonomicClass()     Sets the current record's "TaxonomicClass" value
 * @method StrainUsage     setGenus()              Sets the current record's "Genus" value
 * @method StrainUsage     setSpecies()            Sets the current record's "Species" value
 * @method StrainUsage     setUsages()             Sets the current record's "Usages" value
 * 
 * @package    ACM
 * @subpackage model
 * @author     
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseStrainUsage extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('strain_usage');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('taxonomic_class_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('genus_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('species_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('usage_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));


        $this->index('unique_strain_usage', array(
             'fields' => 
             array(
              0 => 'taxonomic_class_id',
              1 => 'genus_id',
              2 => 'species_id',
              3 => 'usage_id',
             ),
             'type' => 'unique',
             ));
        $this->option('type', 'INNODB');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('TaxonomicClass', array(
             'local' => 'taxonomic_class_id',
             'foreign' => 'id'));

        $this->hasOne('Genus', array(
             'local' => 'genus_id',
             'foreign' => 'id'));

        $this->hasOne('Species', array(
             'local' => 'species_id',
             'foreign' => 'id'));

        $this->hasOne('UsageAreaUsages as Usages', array(
             'local' => 'usage_id',
             'foreign' => 'id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}