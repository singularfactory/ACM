<?php
/**
 * Model class
 *
 * acm : Algae Culture Management (https://github.com/singularfactory/ACM)
 * Copyright 2012, Singular Factory <info@singularfactory.com>
 *
 * This file is part of ACM
 *
 * ACM is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ACM is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ACM.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @copyright     Copyright 2012, Singular Factory <info@singularfactory.com>
 * @package       ACM.Lib.Model
 * @since         1.0
 * @link          https://github.com/singularfactory/ACM
 * @license       GPLv3 License (http://www.gnu.org/licenses/gpl.txt)
 */


/**
 * BaseRegion
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @property integer $id
 * @property string $code
 * @property string $name
 * @property integer $country_id
 * @property Country $Country
 * @property Doctrine_Collection $Islands
 * @property Doctrine_Collection $Locations
 *
 * @method integer             getId()         Returns the current record's "id" value
 * @method string              getCode()       Returns the current record's "code" value
 * @method string              getName()       Returns the current record's "name" value
 * @method integer             getCountryId()  Returns the current record's "country_id" value
 * @method Country             getCountry()    Returns the current record's "Country" value
 * @method Doctrine_Collection getIslands()    Returns the current record's "Islands" collection
 * @method Doctrine_Collection getLocations()  Returns the current record's "Locations" collection
 * @method Region              setId()         Sets the current record's "id" value
 * @method Region              setCode()       Sets the current record's "code" value
 * @method Region              setName()       Sets the current record's "name" value
 * @method Region              setCountryId()  Sets the current record's "country_id" value
 * @method Region              setCountry()    Sets the current record's "Country" value
 * @method Region              setIslands()    Sets the current record's "Islands" collection
 * @method Region              setLocations()  Sets the current record's "Locations" collection
 *
 * @package ACM.Lib.Model
 * @since 1.0
 */
abstract class BaseRegion extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('region');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('code', 'string', 3, array(
             'type' => 'string',
             'fixed' => 1,
             'notnull' => true,
             'length' => 3,
             ));
        $this->hasColumn('name', 'string', 60, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 60,
             ));
        $this->hasColumn('country_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));


        $this->index('region_name', array(
             'fields' =>
             array(
              'name' =>
              array(
              'length' => 20,
              ),
             ),
             ));
        $this->option('type', 'INNODB');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Country', array(
             'local' => 'country_id',
             'foreign' => 'id',
             'onDelete' => 'cascade'));

        $this->hasMany('Island as Islands', array(
             'local' => 'id',
             'foreign' => 'region_id'));

        $this->hasMany('Location as Locations', array(
             'local' => 'id',
             'foreign' => 'region_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}