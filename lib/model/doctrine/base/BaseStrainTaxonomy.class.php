<?php

/**
 * BaseStrainTaxonomy
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $taxonomic_class_id
 * @property integer $genus_id
 * @property integer $species_id
 * @property TaxonomicClass $TaxonomicClass
 * @property Genus $Genus
 * @property Species $Species
 * @property Doctrine_Collection $PotentialUsages
 * @property Doctrine_Collection $StrainTaxonomies
 * 
 * @method integer             getId()                 Returns the current record's "id" value
 * @method integer             getTaxonomicClassId()   Returns the current record's "taxonomic_class_id" value
 * @method integer             getGenusId()            Returns the current record's "genus_id" value
 * @method integer             getSpeciesId()          Returns the current record's "species_id" value
 * @method TaxonomicClass      getTaxonomicClass()     Returns the current record's "TaxonomicClass" value
 * @method Genus               getGenus()              Returns the current record's "Genus" value
 * @method Species             getSpecies()            Returns the current record's "Species" value
 * @method Doctrine_Collection getPotentialUsages()    Returns the current record's "PotentialUsages" collection
 * @method Doctrine_Collection getStrainTaxonomies()   Returns the current record's "StrainTaxonomies" collection
 * @method StrainTaxonomy      setId()                 Sets the current record's "id" value
 * @method StrainTaxonomy      setTaxonomicClassId()   Sets the current record's "taxonomic_class_id" value
 * @method StrainTaxonomy      setGenusId()            Sets the current record's "genus_id" value
 * @method StrainTaxonomy      setSpeciesId()          Sets the current record's "species_id" value
 * @method StrainTaxonomy      setTaxonomicClass()     Sets the current record's "TaxonomicClass" value
 * @method StrainTaxonomy      setGenus()              Sets the current record's "Genus" value
 * @method StrainTaxonomy      setSpecies()            Sets the current record's "Species" value
 * @method StrainTaxonomy      setPotentialUsages()    Sets the current record's "PotentialUsages" collection
 * @method StrainTaxonomy      setStrainTaxonomies()   Sets the current record's "StrainTaxonomies" collection
 * 
 * @package    ACM
 * @subpackage model
 * @author     
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseStrainTaxonomy extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('strain_taxonomy');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('taxonomic_class_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('genus_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('species_id', 'integer', null, array(
             'type' => 'integer',
             ));


        $this->index('unique_strain_taxonomy', array(
             'fields' => 
             array(
              0 => 'taxonomic_class_id',
              1 => 'genus_id',
              2 => 'species_id',
             ),
             'type' => 'unique',
             ));
        $this->option('type', 'INNODB');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('TaxonomicClass', array(
             'local' => 'taxonomic_class_id',
             'foreign' => 'id'));

        $this->hasOne('Genus', array(
             'local' => 'genus_id',
             'foreign' => 'id'));

        $this->hasOne('Species', array(
             'local' => 'species_id',
             'foreign' => 'id'));

        $this->hasMany('UsageAreaUsageTargets as PotentialUsages', array(
             'refClass' => 'PotentialUsages',
             'local' => 'strain_taxonomy_id',
             'foreign' => 'usage_id'));

        $this->hasMany('UsageAreaUsageTargets as StrainTaxonomies', array(
             'refClass' => 'PotentialUsages',
             'local' => 'strain_taxonomy_id',
             'foreign' => 'id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}