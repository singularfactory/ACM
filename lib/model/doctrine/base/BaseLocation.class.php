<?php
/**
 * Model class
 *
 * acm : Algae Culture Management (https://github.com/singularfactory/ACM)
 * Copyright 2012, Singular Factory <info@singularfactory.com>
 *
 * This file is part of ACM
 *
 * ACM is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ACM is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ACM.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @copyright     Copyright 2012, Singular Factory <info@singularfactory.com>
 * @package       ACM.Lib.Model
 * @since         1.0
 * @link          https://github.com/singularfactory/ACM
 * @license       GPLv3 License (http://www.gnu.org/licenses/gpl.txt)
 */


/**
 * BaseLocation
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @property integer $id
 * @property string $name
 * @property integer $category_id
 * @property string $latitude
 * @property string $longitude
 * @property integer $country_id
 * @property integer $region_id
 * @property integer $island_id
 * @property string $remarks
 * @property LocationCategory $Category
 * @property Country $Country
 * @property Region $Region
 * @property Island $Island
 * @property Doctrine_Collection $Pictures
 * @property Doctrine_Collection $Samples
 * @property Doctrine_Collection $PatentDeposits
 * @property Doctrine_Collection $MaintenanceDeposits
 * @property Doctrine_Collection $ExternalStrains
 * @property Doctrine_Collection $Isolations
 *
 * @method integer             getId()                  Returns the current record's "id" value
 * @method string              getName()                Returns the current record's "name" value
 * @method integer             getCategoryId()          Returns the current record's "category_id" value
 * @method string              getLatitude()            Returns the current record's "latitude" value
 * @method string              getLongitude()           Returns the current record's "longitude" value
 * @method integer             getCountryId()           Returns the current record's "country_id" value
 * @method integer             getRegionId()            Returns the current record's "region_id" value
 * @method integer             getIslandId()            Returns the current record's "island_id" value
 * @method string              getRemarks()             Returns the current record's "remarks" value
 * @method LocationCategory    getCategory()            Returns the current record's "Category" value
 * @method Country             getCountry()             Returns the current record's "Country" value
 * @method Region              getRegion()              Returns the current record's "Region" value
 * @method Island              getIsland()              Returns the current record's "Island" value
 * @method Doctrine_Collection getPictures()            Returns the current record's "Pictures" collection
 * @method Doctrine_Collection getSamples()             Returns the current record's "Samples" collection
 * @method Doctrine_Collection getPatentDeposits()      Returns the current record's "PatentDeposits" collection
 * @method Doctrine_Collection getMaintenanceDeposits() Returns the current record's "MaintenanceDeposits" collection
 * @method Doctrine_Collection getExternalStrains()     Returns the current record's "ExternalStrains" collection
 * @method Doctrine_Collection getIsolations()          Returns the current record's "Isolations" collection
 * @method Location            setId()                  Sets the current record's "id" value
 * @method Location            setName()                Sets the current record's "name" value
 * @method Location            setCategoryId()          Sets the current record's "category_id" value
 * @method Location            setLatitude()            Sets the current record's "latitude" value
 * @method Location            setLongitude()           Sets the current record's "longitude" value
 * @method Location            setCountryId()           Sets the current record's "country_id" value
 * @method Location            setRegionId()            Sets the current record's "region_id" value
 * @method Location            setIslandId()            Sets the current record's "island_id" value
 * @method Location            setRemarks()             Sets the current record's "remarks" value
 * @method Location            setCategory()            Sets the current record's "Category" value
 * @method Location            setCountry()             Sets the current record's "Country" value
 * @method Location            setRegion()              Sets the current record's "Region" value
 * @method Location            setIsland()              Sets the current record's "Island" value
 * @method Location            setPictures()            Sets the current record's "Pictures" collection
 * @method Location            setSamples()             Sets the current record's "Samples" collection
 * @method Location            setPatentDeposits()      Sets the current record's "PatentDeposits" collection
 * @method Location            setMaintenanceDeposits() Sets the current record's "MaintenanceDeposits" collection
 * @method Location            setExternalStrains()     Sets the current record's "ExternalStrains" collection
 * @method Location            setIsolations()          Sets the current record's "Isolations" collection
 *
 * @package ACM.Lib.Model
 * @since 1.0
 */
abstract class BaseLocation extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('location');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('category_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('latitude', 'string', 12, array(
             'type' => 'string',
             'fixed' => 1,
             'length' => 12,
             ));
        $this->hasColumn('longitude', 'string', 12, array(
             'type' => 'string',
             'fixed' => 1,
             'length' => 12,
             ));
        $this->hasColumn('country_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('region_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('island_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('remarks', 'string', null, array(
             'type' => 'string',
             ));


        $this->index('location_name', array(
             'fields' =>
             array(
              'name' =>
              array(
              'length' => 20,
              ),
             ),
             ));
        $this->option('type', 'INNODB');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('LocationCategory as Category', array(
             'local' => 'category_id',
             'foreign' => 'id'));

        $this->hasOne('Country', array(
             'local' => 'country_id',
             'foreign' => 'id'));

        $this->hasOne('Region', array(
             'local' => 'region_id',
             'foreign' => 'id'));

        $this->hasOne('Island', array(
             'local' => 'island_id',
             'foreign' => 'id'));

        $this->hasMany('LocationPicture as Pictures', array(
             'local' => 'id',
             'foreign' => 'location_id'));

        $this->hasMany('Sample as Samples', array(
             'local' => 'id',
             'foreign' => 'location_id'));

        $this->hasMany('PatentDeposit as PatentDeposits', array(
             'local' => 'id',
             'foreign' => 'location_id'));

        $this->hasMany('MaintenanceDeposit as MaintenanceDeposits', array(
             'local' => 'id',
             'foreign' => 'location_id'));

        $this->hasMany('ExternalStrain as ExternalStrains', array(
             'local' => 'id',
             'foreign' => 'location_id'));

        $this->hasMany('Isolation as Isolations', array(
             'local' => 'id',
             'foreign' => 'location_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}