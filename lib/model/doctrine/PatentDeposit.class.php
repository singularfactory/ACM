<?php
/**
 * Model class
 *
 * acm : Algae Culture Management (https://github.com/singularfactory/ACM)
 * Copyright 2012, Singular Factory <info@singularfactory.com>
 *
 * This file is part of ACM
 *
 * ACM is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ACM is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ACM.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @copyright     Copyright 2012, Singular Factory <info@singularfactory.com>
 * @package       ACM.Lib.Model
 * @since         1.0
 * @link          https://github.com/singularfactory/ACM
 * @license       GPLv3 License (http://www.gnu.org/licenses/gpl.txt)
 */


/**
 * PatentDeposit
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package ACM.Lib.Model
 * @since 1.0
 */
class PatentDeposit extends BasePatentDeposit {
	public function getCode() {
		return $this->getDepositorCode();
	}

	public function getNbCultureMedia() {
		return PatentDepositCultureMediaTable::getInstance()->createQuery('cm')
			->where('cm.patent_deposit_id = ?', $this->getId())
			->count();
	}

	public function getNbCollectors() {
		return PatentDepositCollectorsTable::getInstance()->createQuery('c')
			->where('c.patent_deposit_id = ?', $this->getId())
			->count();
	}

	public function getNbIsolators() {
		return PatentDepositIsolatorsTable::getInstance()->createQuery('i')
			->where('i.patent_deposit_id = ?', $this->getId())
			->count();
	}

	public function getNbRelatives() {
		return PatentDepositRelativeTable::getInstance()->createQuery('r')
			->where('r.patent_deposit_id = ?', $this->getId())
			->count();
	}

	public function hasDna() {
		if ( $this->_get('has_dna') ) {
			return true;
		}
		return false;
	}

	public function isAxenic() {
		if ( $this->_get('is_axenic') ) {
			return true;
		}
		return false;
	}

	public function getFormattedEnvironment() {
		if ( $this->getEnvironment()->exists() ) {
			return $this->getEnvironment()->getName();
		}
		return sfConfig::get('app_no_data_message');
	}

	public function getFormattedHabitat() {
		if ( $this->getHabitat()->exists() ) {
			return $this->getHabitat()->getName();
		}
		return sfConfig::get('app_no_data_message');
	}

	public function getFormattedHasDna() {
		if ( $this->hasDna() ) {
			return 'yes';
		}
		return 'no';
	}

	public function getFormattedIsEpitype() {
		if ( $this->getIsEpitype() ) {
			return 'yes';
		}
		return 'no';
	}

	public function getFormattedIsAxenic() {
		if ( $this->isAxenic() ) {
			return 'yes';
		}
		return 'no';
	}

	public function getFormattedCitations() {
		if ( $citations = $this->_get('citations') ) {
			return $citations;
		}
		return sfConfig::get('app_no_data_message');
	}

	public function getFormattedViabilityTest() {
		if ( $test = $this->_get('viability_test') ) {
			return $test;
		}
		return sfConfig::get('app_no_data_message');
	}

	public function getFormattedTransferInterval() {
		if ( $transferInterval = $this->_get('transfer_interval') ) {
			return "$transferInterval weeks";
		}
		return sfConfig::get('app_no_data_message');
	}

	public function getFormattedObservation() {
		if ( $observation = $this->_get('observation') ) {
			return $observation;
		}
		return sfConfig::get('app_no_data_message');
	}

	public function getDepositionDate() {
		if ( $date = $this->_get('deposition_date') ) {
			return $this->formatDate($date);
		}
		else {
			return sfConfig::get('app_no_data_message');
		}
	}

	public function getIsolationDate() {
		if ( $date = $this->_get('isolation_date') ) {
			return $this->formatDate($date);
		}
		else {
			return sfConfig::get('app_no_data_message');
		}
	}

	public function getCollectionDate() {
		if ( $date = $this->_get('collection_date') ) {
			return $this->formatDate($date);
		}
		else {
			return sfConfig::get('app_no_data_message');
		}
	}

	public function getBp1DocumentUrl() {
		$path = sfConfig::get('app_documents_dir').sfConfig::get('app_patent_deposit_dir');
		$filename = $this->getBp1Document();

		if ( empty($filename) ) {
			return null;
		}
		else {
			return "$path/$filename";
		}
	}

	public function getBp4DocumentUrl() {
		$path = sfConfig::get('app_documents_dir').sfConfig::get('app_patent_deposit_dir');
		$filename = $this->getBp4Document();

		if ( empty($filename) ) {
			return null;
		}
		else {
			return "$path/$filename";
		}
	}

	public function getGenusAndSpecies() {
		return sprintf('%s %s', $this->getGenus(), $this->getSpecies());
	}
}
