<?php
/**
 * Model class
 *
 * acm : Algae Culture Management (https://github.com/singularfactory/ACM)
 * Copyright 2012, Singular Factory <info@singularfactory.com>
 *
 * This file is part of ACM
 *
 * ACM is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ACM is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ACM.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @copyright     Copyright 2012, Singular Factory <info@singularfactory.com>
 * @package       ACM.Lib.Model
 * @since         1.0
 * @link          https://github.com/singularfactory/ACM
 * @license       GPLv3 License (http://www.gnu.org/licenses/gpl.txt)
 */


/**
 * ExternalStrainTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ExternalStrainTable extends Doctrine_Table {
	/**
	* Returns an instance of this class.
	*
	* @return object ExternalStrainTable
	*/
	public static function getInstance() {
		return Doctrine_Core::getTable('ExternalStrain');
	}

	public function getDefaultExternalStrainId() {
		$strain = $this->createQuery('s')->fetchOne();
		if ( $strain ) {
			return (int)$strain->getId();
		}

		return 0;
	}

	public function findByTerm($term = '') {
		if ( preg_match('/0*(\d+)/', $term, $matches) ) {
			return $this->createQuery('s')
				->where('s.id LIKE ?', $matches[1])
				->execute();
		}
		else {
			return $this->createQuery('s')->execute();
		}
	}

	public function availableSupervisorsQuery() {
		return sfGuardUserTable::getInstance()->createQuery('Supervisor')
			->distinct()
			->innerJoin('Supervisor.ExternalStrains Strain')
			->orderBy('Supervisor.initials');
	}

	public function availableTransferIntervalChoices($supervisor) {
		$strains = ExternalStrainTable::getInstance()->createQuery('s')
			->distinct()
			->select('s.transfer_interval')
			->where('s.supervisor_id = ?', $supervisor)
			->orderBy('s.transfer_interval')
			->execute();

		$transferIntervals = array(0 => '');
		foreach ($strains as $strain) {
			$interval = $strain->getTransferInterval();
			if ($interval && !array_key_exists($interval, $transferIntervals)) {
				$transferIntervals[$interval] = $interval;
			}
		}
		ksort($transferIntervals);
		return $transferIntervals;
	}

	public function availableGenusQuery($supervisor, $transferInterval) {
		return GenusTable::getInstance()->createQuery('g')
			->distinct()
			->innerJoin('g.ExternalStrains s')
			->where('s.supervisor_id = ?', $supervisor)
			->andWhere("s.transfer_interval LIKE ?", $transferInterval)
			->orderBy('g.name');
	}

	public function availableContainersQuery($supervisor, $transferInterval, $genus, $axenic) {
		$axenic = ($axenic == 2) ? 1 : 0;
		return ContainerTable::getInstance()->createQuery('c')
			->distinct()
			->innerJoin('c.ExternalStrainContainers s')
			->innerJoin('s.ExternalStrain st')
			->where('st.supervisor_id = ?', $supervisor)
			->andWhere("st.transfer_interval LIKE ?", $transferInterval)
			->andWhere('st.genus_id = ?', $genus)
			->andWhere('st.is_axenic = ?', $axenic)
			->orderBy('c.name');
	}

	public function availableCultureMediaQuery($supervisor, $transferInterval, $genus, $axenic, $container) {
		$axenic = ($axenic == 2) ? 1 : 0;
		return CultureMediumTable::getInstance()->createQuery('c')
			->distinct()
			->innerJoin('c.ExternalStrainCultureMedia s')
			->innerJoin('s.ExternalStrain st')
			->innerJoin('st.ExternalStrainContainers sc')
			->innerJoin('st.Genus g')
			->where('st.supervisor_id = ?', $supervisor)
			->andWhere("st.transfer_interval LIKE ?", $transferInterval)
			->andWhere('st.genus_id = ?', $genus)
			->andWhere('st.is_axenic = ?', $axenic)
			->andWhere('sc.container_id = ?', $container)
			->orderBy('c.name');
	}

	public function availableExternalStrainsForLabelConfiguration($configuration) {
		$axenic = ($configuration['is_axenic'] == 2) ? 1 : 0;
		return ExternalStrainTable::getInstance()->createQuery('s')
			->distinct()
			->innerJoin('s.ExternalStrainCultureMedia cm')
			->innerJoin('s.ExternalStrainContainers c')
			->where('s.supervisor_id = ?', $configuration['supervisor_id'])
			->andWhere("s.transfer_interval LIKE ?", $configuration['transfer_interval'])
			->andWhere('s.genus_id = ?', $configuration['genus_id'])
			->andWhere('s.is_axenic = ?', $axenic)
			->andWhere('c.container_id = ?', $configuration['container_id'])
			->andWhere('cm.culture_medium_id = ?', $configuration['culture_medium_id'])
			->orderBy('s.id')
			->execute();
	}
}
