<?php
/**
 * Model class
 *
 * acm : Algae Culture Management (https://github.com/singularfactory/ACM)
 * Copyright 2012, Singular Factory <info@singularfactory.com>
 *
 * This file is part of ACM
 *
 * ACM is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ACM is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ACM.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @copyright     Copyright 2012, Singular Factory <info@singularfactory.com>
 * @package       ACM.Lib.Model
 * @since         1.0
 * @link          https://github.com/singularfactory/ACM
 * @license       GPLv3 License (http://www.gnu.org/licenses/gpl.txt)
 */


/**
 * PurchaseOrder
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package ACM.Lib.Model
 * @since 1.0
 */
class PurchaseOrder extends BasePurchaseOrder {

	public function getNbPendingPurchaseOrders() {
		return PurchaseOrderTable::getInstance()->createQuery('po')
			->where('po.status < ?', sfConfig::get('app_purchase_order_sent'))
			->count();
	}

	public function getFormattedCustomer() {
		if ( $customer = $this->_get('customer') ) {
			return $customer;
		}

		return sfConfig::get('app_no_data_message');
	}

	public function getDate() {
		return $this->formatFriendlyDate($this->getCreatedAt());
	}

	public function getFormattedActivationDate() {
		if ( $activationDate = $this->_get('activation_date') ) {
			return $this->formatFriendlyDate($activationDate);
		}

		return sfConfig::get('app_no_data_message');
	}

	public function getFormattedDeliveryDate() {
		if ( $deliveryDate = $this->_get('delivery_date') ) {
			return $this->formatFriendlyDate($deliveryDate);
		}

		return sfConfig::get('app_no_data_message');
	}

	public function setActivationDate($activationDate) {
		if ( !$this->_get('activation_date') ) {
			return $this->_set('activation_date', $activationDate);
		}
	}

	public function setStatus($status) {
		if ( $this->getStatus() == sfConfig::get('app_purchase_order_pending') && $status > sfConfig::get('app_purchase_order_pending') ) {
			$this->setActivationDate(date('Y-m-d H:i:s'));
		}

		if ( $this->getStatus() != sfConfig::get('app_purchase_order_ready') && $status >= sfConfig::get('app_purchase_order_ready') ) {
			$this->setDeliveryDate(date('Y-m-d H:i:s'));
		}

		$this->_set('status', $status);
	}

	public function getFormattedStatus() {
		switch( $this->_get('status') ) {
			case sfConfig::get('app_purchase_order_pending'):
				return 'pending';
				break;
			case sfConfig::get('app_purchase_order_processing'):
				return 'processing';
				break;
			case sfConfig::get('app_purchase_order_ready');
				return 'ready';
				break;
		}

		return 'processing';
	}

	public function getDeliveryCode() {
		if ( $code = $this->_get('delivery_code') ) {
			return $code;
		}
		return sfConfig::get('app_no_data_message');
	}

	public function getNbItems() {
		return PurchaseItemTable::getInstance()->createQuery('pi')
			->where('pi.purchase_order_id = ?', $this->getId())
			->count();
	}

	public function getNbReadyItems() {
		return PurchaseItemTable::getInstance()->createQuery('pi')
			->where('pi.purchase_order_id = ?', $this->getId())
			->andWhere('pi.status = ?', sfConfig::get('app_purchase_item_ready'))
			->count();
	}

	public function updateStatusWithItemStatus($itemStatus) {
		if ( $itemStatus == sfConfig::get('app_purchase_item_pending') ) {
			return;
		}

		if ( $itemStatus == sfConfig::get('app_purchase_item_processing') ) {
			$this->setStatus(sfConfig::get('app_purchase_order_processing'));
			$this->setActivationDate(date('Y-m-d H:i:s'));
			$this->trySave();
		}

		if ( $itemStatus == sfConfig::get('app_purchase_item_ready') ) {
			if ( $this->getNbReadyItems() == $this->getNbItems() ) {
				$this->setStatus(sfConfig::get('app_purchase_order_ready'));
				$this->setDeliveryDate(date('Y-m-d H:i:s'));
				$this->trySave();
			}
			else {
				$this->setStatus(sfConfig::get('app_purchase_order_processing'));
				$this->setActivationDate(date('Y-m-d H:i:s'));
				$this->trySave();
			}
		}
	}

	public function updateItemsStatus() {
		if ( $this->getStatus() >= sfConfig::get('app_purchase_order_ready') ) {
			$items = array();
			foreach ( $this->getItems() as $item ) {
				$items[] = $item->getId();
			}

			PurchaseItemTable::getInstance()
				->createQuery('pi')
				->update()
				->set('pi.status', sfConfig::get('app_purchase_item_ready'))
				->whereIn('pi.purchase_order_id', $items)
				->execute();
		}
	}

	public function getFormattedRemarks() {
		$remarks = $this->getRemarks();
		if ( empty($remarks) ) {
			return sfConfig::get('app_no_data_message');
		}
		else {
			return $remarks;
		}
	}

}
