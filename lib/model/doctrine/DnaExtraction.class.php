<?php

/**
 * DnaExtraction
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    bna_green_house
 * @subpackage model
 * @author     Eliezer Talon <elitalon@inventiaplus.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class DnaExtraction extends BaseDnaExtraction {
	
	public function getCode() {
		$strainNumber = $this->getStrain()->getFullCode();
		$extractionDate = date('Ymd', strtotime($this->getExtractionDate()));
		
		return "{$strainNumber}_{$extractionDate}";
	}
	
	public function getNbPcr() {
		if ( $this->getPcr() ) {
			return count($this->getPcr());
		}
		
		return Doctrine_Query::create()
			->from('PCR pcr')
			->where('pcr.dna_extraction_id = ?', $this->getId())
			->count();
	}
	
	public function getFormattedConcentration() {
		if ( ($concentration = $this->_get('concentration')) > 0 ) {
			return $concentration.' '.sfConfig::get('app_concentration_unit');
		}
		else {
			return sfConfig::get('app_no_data_message');
		}
	}
	
	public function getAliquots() {
		if ( $aliquots = $this->_get('aliquots') ) {
			return $aliquots;
		}
		return 0;
	}
	
	public function getFormatted260280Ratio() {
		if ( $ratio = $this->_get('260_280_ratio') ) {
			return $ratio;
		}
		return sfConfig::get('app_no_data_message');
	}
	
	public function getFormatted260230Ratio() {
		if ( $ratio = $this->_get('260_230_ratio') ) {
			return $ratio;
		}
		return sfConfig::get('app_no_data_message');
	}
	
	public function getFormattedIsPublic() {
		if ( $this->_get('is_public') == 0 ) {
			return 'no';
		}
		else {
			return 'yes';
		}
	}
	
	public function getFormattedAliquots() {
		if ( ($aliquots = $this->_get('aliquots')) > 0 ) {
			return "yes ($aliquots)";
		}
		else {
			return sfConfig::get('app_no_data_message');
		}
	}
	
	public function getFormattedGenbankLink() {
		if ( $link = $this->_get('genbank_link') ) {
			return $link;
		}
		
		return sfConfig::get('app_no_data_message');
	}
	
	public function aliquotsAreEditable() {
		return DnaExtractionTable::getInstance()->createQuery('e')
			->leftJoin('e.Pcr pcr')
			->where('pcr.dna_extraction_id = ?', $this->getId())
			->andWhere('pcr.can_be_sequenced = ?', 1)
			->count() > 0;
	}
	
	public function hasDnaSequence() {
		$result = DnaExtractionTable::getInstance()->createQuery('d')
			->select('count(s.id) as dna_sequence_count')
			->leftJoin('d.Pcr p')
			->leftJoin('p.Sequence s')
			->where('d.id = ?', $this->getId())
			->fetchOne();
		
		return $result->dna_sequence_count > 0;
	}
	
	public function getFormattedHasDnaSequence() {
		return $this->hasDnaSequence() ? 'yes' : 'no';
	}

	public function getFormattedArrivalDate() {
		if ( $arrivalDate = $this->_get('arrival_date') ) {
			return $this->formatFriendlyDate($arrivalDate, false);
		}
		
		return sfConfig::get('app_no_data_message');
	}

	public function getFormattedExtractionDate() {
		if ( $extractionDate = $this->_get('extraction_date') ) {
			return $this->formatFriendlyDate($extractionDate, false);
		}
		
		return sfConfig::get('app_no_data_message');
	}
}
